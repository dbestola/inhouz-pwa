/* eslint-disable no-restricted-globals */

// Use Workbox from CDN
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.5.0/workbox-sw.js');

if (workbox) {
  console.log(`Workbox is loaded`);

  // Precache all assets generated by the build process
  workbox.precaching.precacheAndRoute(self.__WB_MANIFEST || []);

  // Set up App Shell-style routing
  const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
  
  workbox.routing.registerRoute(
    // Custom logic to determine which requests to handle
    ({ request, url }) => {
      if (request.mode !== 'navigate') return false;
      if (url.pathname.startsWith('/_')) return false;
      if (url.pathname.match(fileExtensionRegexp)) return false;
      return true;
    },
    new workbox.strategies.NetworkFirst({
      cacheName: 'html-cache',
      plugins: [
        {
          cacheWillUpdate: async ({ response }) => {
            // If the response is not valid, return undefined
            return response && response.ok ? response : null;
          },
        },
      ],
    })
  );

  // Example runtime caching for image requests
  workbox.routing.registerRoute(
    ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
    new workbox.strategies.StaleWhileRevalidate({
      cacheName: 'images',
      plugins: [
        new workbox.expiration.ExpirationPlugin({ maxEntries: 50 }),
      ],
    })
  );

  // Allow web app to trigger skipWaiting
  self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
      self.skipWaiting();
    }
  });

  // Convert VAPID public key from base64 to Uint8Array
  const urlBase64ToUint8Array = (base64String) => {
    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
    const rawData = atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  };

  // Save subscription on the backend
  const saveSubscription = async (subscription) => {
    const response = await fetch('https://backendserviceworker.onrender.com/save-subscription', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(subscription),
    });
    return response.json();
  };


  // Subscribe to push notifications
  self.addEventListener('activate', async (e) => {
    e.waitUntil(
      self.registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: urlBase64ToUint8Array('BKJiG98BQxyXTSCATcckYIu0hy__DonFuu1B5yJHgzVHzH7WfJON7eA2xzexIs5ih23F2PR5qfEYSNDCPQP1en0'),
      }).then((subscription) => {
        console.log('Successfully subscribed to push notifications:', subscription);
        return saveSubscription(subscription);
      }).catch((error) => {
        console.error('Failed to subscribe to push notifications:', error);
      })
    );
  });

  // Push event listener
  self.addEventListener('push', (e) => {
    const data = e.data ? e.data.text() : 'Default Notification';
    const options = {
      body: data,
      icon: 'path/to/icon.png', // Specify a notification icon if desired
    };
    e.waitUntil(
      self.registration.showNotification('New Notification', options)
    );
  });
} else {
  console.log(`Workbox didn't load`);
}
